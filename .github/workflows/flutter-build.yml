name: 🔨 Flutter APK Build

on:
  push:
    branches: [main, develop]
    paths:
      - 'mobile/**'
      - '.github/workflows/flutter-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'mobile/**'
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode'
        required: false
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build-apk:
    name: 📱 Build Android APK
    runs-on: self-hosted
    defaults:
      run:
        working-directory: mobile/guardianes_mobile

    steps:
      - name: 🧹 Ultimate Workspace Cleanup
        run: |
          # Kill any Docker containers that might be holding files
          docker ps -q | xargs -r docker kill || true
          docker ps -aq | xargs -r docker rm -f || true
          
          # Use Docker container with root privileges to clean up root-owned files
          echo "🧹 Using Docker to clean root-owned Flutter build directories..."
          docker run --rm -v /datos_nvme/run0/actions-runner/_work/guardianes-de-gaia:/workspace alpine:latest \
            sh -c "find /workspace -name 'build' -type d -exec rm -rf {} + 2>/dev/null || true"
          
          # Clean Flutter plugin symlinks and ephemeral directories that cause permission issues
          echo "🔗 Cleaning Flutter plugin symlinks and ephemeral directories..."
          docker run --rm -v /datos_nvme/run0/actions-runner/_work/guardianes-de-gaia:/workspace alpine:latest \
            sh -c "find /workspace -path '*/flutter/ephemeral' -type d -exec rm -rf {} + 2>/dev/null || true"
          
          # Additional cleanup with direct removal
          if [ -d "${{ github.workspace }}/mobile/guardianes_mobile/build" ]; then
            echo "🗑️ Removing Flutter build directory with elevated privileges..."
            rm -rf ${{ github.workspace }}/mobile/guardianes_mobile/build || \
            docker run --rm -v ${{ github.workspace }}:/workspace alpine:latest \
              sh -c "rm -rf /workspace/mobile/guardianes_mobile/build" || true
          fi
          
          # Clean git repository state if it exists (but don't reset to avoid checkout conflicts)
          cd ${{ github.workspace }} 2>/dev/null && git clean -fdx 2>/dev/null || true
          
          # Ensure proper ownership of workspace
          chown -R run0:run0 ${{ github.workspace }} 2>/dev/null || \
          chown -R $(whoami):$(whoami) ${{ github.workspace }} 2>/dev/null || true

      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: false
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: 🔨 Build APK with Docker
        working-directory: .
        run: |
          BUILD_MODE="${{ github.event.inputs.build_mode || 'debug' }}"
          echo "Building APK in $BUILD_MODE mode using custom Flutter Docker container..."
          
          # Build our custom Flutter Docker image
          echo "🏗️ Building custom Flutter Docker image with Flutter 3.19.6..."
          docker build --no-cache -f docker/flutter/Dockerfile -t guardianes-flutter:latest .
          
          # Run comprehensive Flutter build in Docker
          docker run --rm \
            -v ${{ github.workspace }}/mobile/guardianes_mobile:/workspace \
            -w /workspace \
            guardianes-flutter:latest \
            sh -c "
              echo '🔍 Checking Flutter environment...'
              flutter doctor -v
              
              echo '📦 Installing dependencies...'
              flutter pub get
              
              echo '🏗️ Generating code...'
              dart run build_runner build --delete-conflicting-outputs || echo 'Code generation completed with warnings'
              
              echo '🔨 Building APK...'
              if [ '$BUILD_MODE' = 'release' ]; then
                flutter build apk --release --verbose
              else
                flutter build apk --debug --verbose
              fi
              
              echo '✅ APK build completed!'
              ls -la build/app/outputs/flutter-apk/
            "

      - name: 📱 Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: guardianes-mobile-${{ github.event.inputs.build_mode || 'debug' }}-${{ github.sha }}
          path: mobile/guardianes_mobile/build/app/outputs/flutter-apk/*.apk
          retention-days: 30

      - name: 📊 APK Build Summary
        run: |
          echo "## 📱 APK Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Mode:** ${{ github.event.inputs.build_mode || 'debug' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            APK_SIZE=$(du -h build/app/outputs/flutter-apk/app-debug.apk | cut -f1)
            echo "**APK Size:** $APK_SIZE" >> $GITHUB_STEP_SUMMARY
            echo "**APK Path:** build/app/outputs/flutter-apk/app-debug.apk" >> $GITHUB_STEP_SUMMARY
          elif [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            APK_SIZE=$(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)
            echo "**APK Size:** $APK_SIZE" >> $GITHUB_STEP_SUMMARY
            echo "**APK Path:** build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **APK build completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📲 **Installation Instructions:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the APK from the artifacts section above" >> $GITHUB_STEP_SUMMARY
          echo "2. Enable 'Unknown Sources' in your Android device settings" >> $GITHUB_STEP_SUMMARY
          echo "3. Install the APK on your device" >> $GITHUB_STEP_SUMMARY
          echo "4. The app will connect to: **dev-guardianes.duckdns.org:8080**" >> $GITHUB_STEP_SUMMARY

  test-apk:
    name: 🧪 APK Integration Tests
    runs-on: self-hosted
    needs: build-apk
    if: always()
    defaults:
      run:
        working-directory: mobile/guardianes_mobile

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: false
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: 📱 Download APK
        uses: actions/download-artifact@v4
        with:
          name: guardianes-mobile-${{ github.event.inputs.build_mode || 'debug' }}-${{ github.sha }}
          path: ./apk

      - name: 🔍 Verify APK
        run: |
          echo "## 🔍 APK Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "./apk/app-debug.apk" ] || [ -f "./apk/app-release.apk" ]; then
            echo "✅ **APK file found and verified**" >> $GITHUB_STEP_SUMMARY
            ls -la ./apk/*.apk >> $GITHUB_STEP_SUMMARY || true
          else
            echo "❌ **APK file not found**" >> $GITHUB_STEP_SUMMARY
            ls -la ./apk/ >> $GITHUB_STEP_SUMMARY || true
          fi

      - name: 🚀 Ready for Installation
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Ready for Installation!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your Guardianes de Gaia APK is ready to install on your smartphone!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Connection:** http://dev-guardianes.duckdns.org:8080" >> $GITHUB_STEP_SUMMARY
          echo "**Test Credentials:** admin / dev123" >> $GITHUB_STEP_SUMMARY