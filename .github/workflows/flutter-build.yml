name: 🔨 Flutter APK Build

on:
  push:
    branches: [main, develop]
    paths:
      - 'mobile/**'
      - '.github/workflows/flutter-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'mobile/**'
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode'
        required: false
        default: 'debug'
        type: choice
        options:
          - debug
          - release

env:
  FLUTTER_VERSION: '3.19.6'
  JAVA_VERSION: '17'

jobs:
  build-apk:
    name: 📱 Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 1
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          channel: 'stable'
      
      - name: 🧹 Clean previous build artifacts
        working-directory: ./mobile/guardianes_mobile
        run: |
          echo "🧹 Cleaning Flutter build cache and temporary files..."
          flutter clean
          
          # Remove problematic directories that cause permission issues
          rm -rf linux/flutter/ephemeral || true
          rm -rf macos/Flutter/ephemeral || true
          rm -rf ios/Flutter/ephemeral || true
          rm -rf build || true
          
          echo "✅ Cleanup completed"
      
      - name: 📦 Get Dependencies
        working-directory: ./mobile/guardianes_mobile
        run: |
          echo "📦 Getting Flutter dependencies..."
          flutter pub get
          echo "✅ Dependencies retrieved"
      
      - name: 🔧 Generate Code
        working-directory: ./mobile/guardianes_mobile
        run: |
          echo "🔧 Generating code with build_runner..."
          dart run build_runner build --delete-conflicting-outputs
          echo "✅ Code generation completed"
      
      - name: 🔧 Configure Android Signing
        working-directory: ./mobile/guardianes_mobile/android
        run: |
          echo "🔧 Configuring Android debug signing..."
          
          # Create .android directory if it doesn't exist
          mkdir -p ~/.android
          
          # Create debug keystore if it doesn't exist
          if [ ! -f ~/.android/debug.keystore ]; then
            echo "Creating debug keystore..."
            keytool -genkey -v \
              -keystore ~/.android/debug.keystore \
              -storepass android \
              -alias androiddebugkey \
              -keypass android \
              -keyalg RSA \
              -keysize 2048 \
              -validity 10000 \
              -dname "CN=Android Debug,O=Android,C=US" \
              -noprompt
          else
            echo "Debug keystore already exists"
          fi
          echo "✅ Android signing configured"
      
      - name: 🏗️ Build Android APK
        working-directory: ./mobile/guardianes_mobile
        env:
          BUILD_MODE: ${{ github.event.inputs.build_mode || 'debug' }}
        run: |
          echo "🏗️ Building Android APK in $BUILD_MODE mode..."
          
          if [ "$BUILD_MODE" = "release" ]; then
            flutter build apk --release --verbose
          else
            flutter build apk --debug --verbose
          fi
          
          # Verify APK was created
          if [ ! -d "build/app/outputs/flutter-apk/" ]; then
            echo "❌ APK build failed - output directory not found"
            exit 1
          fi
          
          echo "✅ APK build completed"
          ls -la build/app/outputs/flutter-apk/
      
      - name: 📤 Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: guardianes-mobile-${{ github.event.inputs.build_mode || 'debug' }}-${{ github.sha }}
          path: mobile/guardianes_mobile/build/app/outputs/flutter-apk/
          retention-days: 30
      
      - name: 📊 Build Summary
        working-directory: ./mobile/guardianes_mobile
        run: |
          echo "## 📱 APK Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Mode:** ${{ github.event.inputs.build_mode || 'debug' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Flutter Version:** ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for apk in build/app/outputs/flutter-apk/*.apk; do
            if [ -f "$apk" ]; then
              SIZE=$(du -h "$apk" | cut -f1)
              FILENAME=$(basename "$apk")
              echo "- **$FILENAME**: $SIZE" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **APK build completed successfully!**" >> $GITHUB_STEP_SUMMARY

  test-apk:
    name: 🧪 APK Integration Tests
    runs-on: ubuntu-latest
    needs: build-apk
    if: always() && needs.build-apk.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📱 Download APK
        uses: actions/download-artifact@v4
        with:
          name: guardianes-mobile-${{ github.event.inputs.build_mode || 'debug' }}-${{ github.sha }}
          path: ./apk
      
      - name: 🔍 Verify APK
        run: |
          echo "🔍 Verifying downloaded APK files..."
          ls -la ./apk/
          
          APK_COUNT=$(find ./apk -name "*.apk" | wc -l)
          echo "Found $APK_COUNT APK file(s)"
          
          if [ $APK_COUNT -eq 0 ]; then
            echo "❌ No APK files found!"
            exit 1
          fi
          
          echo "✅ APK verification completed"
          echo "## 🔍 APK Verification" >> $GITHUB_STEP_SUMMARY
          echo "✅ **APK files verified successfully**" >> $GITHUB_STEP_SUMMARY
      
      - name: 🚀 Ready for Installation
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Ready for Installation!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your Guardianes de Gaia APK is ready to install!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📲 **Installation Instructions:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the APK from the artifacts section above" >> $GITHUB_STEP_SUMMARY
          echo "2. Enable 'Unknown Sources' in your Android device settings" >> $GITHUB_STEP_SUMMARY
          echo "3. Install the APK on your device" >> $GITHUB_STEP_SUMMARY