name: 🐳 Docker Build & Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push images to registry'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository_owner }}/guardianes-backend
  IMAGE_NAME_POSTGRES: ${{ github.repository_owner }}/guardianes-postgres
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  # ============================================
  # Backend Docker Image Build
  # ============================================
  backend-docker:
    name: 🔄 Backend Docker Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}
      
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Guardianes de Gaia Backend
            org.opencontainers.image.description=Spring Boot backend for Guardianes de Gaia mobile game
            org.opencontainers.image.vendor=Guardianes de Gaia Team
            org.opencontainers.image.licenses=MIT
      
      - name: 🏗️ Build and Push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.dev
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      
      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-backend.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-backend.sarif'
          category: 'backend-container'
      
      - name: 🔍 Analyze image with Dive
        run: |
          # Install dive for image analysis
          wget -q https://github.com/wagoodman/dive/releases/download/v0.12.0/dive_0.12.0_linux_amd64.deb
          sudo dpkg -i dive_0.12.0_linux_amd64.deb
          
          # Pull the image for analysis
          IMAGE_REF="${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.meta.outputs.version }}"
          docker pull "$IMAGE_REF"
          
          # Analyze the image
          echo "## 🔍 Docker Image Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: $IMAGE_REF" >> $GITHUB_STEP_SUMMARY
          
          # Get image size and details
          IMAGE_SIZE=$(docker image inspect "$IMAGE_REF" --format='{{.Size}}' | numfmt --to=iec)
          LAYER_COUNT=$(docker image inspect "$IMAGE_REF" --format='{{len .RootFS.Layers}}')
          echo "- **Image Size**: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **Layers**: $LAYER_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Run dive analysis with proper image reference
          echo "Running Dive analysis..."
          dive --ci "$IMAGE_REF" || echo "Dive analysis completed with warnings"
          echo "- **Efficiency**: Analyzed with Dive" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Database Docker Image Build
  # ============================================
  # NOTE: PostgreSQL Docker build is intentionally omitted.
  # The project uses MySQL 8.0 as specified in docker-compose.yml.
  # Custom database images are not needed as we use the official mysql:8.0 image
  # with configuration and init scripts mounted as volumes.

  # ============================================
  # Multi-Architecture Build Summary
  # ============================================
  build-summary:
    name: 📋 Docker Build Summary
    runs-on: ubuntu-latest
    needs: [backend-docker]
    if: always()
    
    steps:
      - name: 📊 Generate Build Summary
        run: |
          echo "## 🐳 Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Build Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Docker**: ${{ needs.backend-docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PostgreSQL Docker**: Disabled (using MySQL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-docker.result }}" == "success" ]]; then
            echo "### 🎯 Backend Image Details:" >> $GITHUB_STEP_SUMMARY
            echo "- **Digest**: ${{ needs.backend-docker.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tags**: " >> $GITHUB_STEP_SUMMARY
            echo '${{ needs.backend-docker.outputs.image-tags }}' | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 🏗️ Build Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: ${{ env.PLATFORMS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: GitHub Container Registry & Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ✅ Completed with Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM**: ✅ Generated" >> $GITHUB_STEP_SUMMARY
          echo "- **Provenance**: ✅ Attestation included" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-docker.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All Docker images built successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some Docker builds failed. Please review logs.**" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 🚨 Notify on Failure
        if: failure() && secrets.SLACK_WEBHOOK
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#guardianes-docker'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "🚨 Docker Build Failed - Guardianes de Gaia",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "Docker Build & Push",
                      "short": true
                    },
                    {
                      "title": "Run ID",
                      "value": "${{ github.run_id }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # Image Promotion (Production Tags)
  # ============================================
  # ============================================
  # Production Image Promotion
  # ============================================
  # NOTE: Production image promotion is handled by the dedicated deployment pipeline
  # (deploy-environments.yml). This job is intentionally disabled to prevent
  # duplicate promotion workflows and ensure proper production deployment controls.
  # 
  # To promote images to production:
  # 1. Use the multi-environment deployment workflow for controlled releases
  # 2. Create a GitHub release to trigger automatic production deployment
  # 3. Use workflow_dispatch on deploy-environments.yml for manual promotion
  #
  # The deployment pipeline provides:
  # - Proper environment protection rules
  # - Blue-green deployment strategy  
  # - Comprehensive validation and rollback capabilities
  # - Approval workflows for production changes