name: 🌐 End-to-End API Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '*.js'
      - 'package.json'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '*.js'
      - 'package.json'
      - '.github/workflows/e2e-tests.yml'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'E2E Test Suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - functional-api
          - user-journey
          - simple-journey
          - visual-journey

env:
  NODE_VERSION: '18'
  BACKEND_PORT: 8080
  TEST_TIMEOUT: 300000  # 5 minutes

jobs:
  # ============================================
  # Backend Service Setup
  # ============================================
  backend-setup:
    name: 🚀 Backend Service Setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    outputs:
      backend-ready: ${{ steps.health-check.outputs.ready }}
    
    # External services removed - using H2 in-memory database for E2E testing
    # This eliminates external dependencies and provides faster, more reliable testing
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: 🏗️ Build Backend JAR
        working-directory: ./backend
        run: |
          echo "Building backend JAR for E2E testing..."
          # Build JAR directly for faster startup - skipping quality checks
          mvn clean package -DskipTests -Dspotless.apply.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true -Ddependency-check.skip=true
          ls -la target/*.jar
          echo "✅ Backend JAR built successfully"
      
      - name: 🚀 Start Backend Service (H2 In-Memory)
        working-directory: ./backend
        env:
          SPRING_PROFILES_ACTIVE: e2e
          SERVER_PORT: ${{ env.BACKEND_PORT }}
          JAVA_OPTS: '-Xmx1024m -Xms512m -XX:TieredStopAtLevel=1 -XX:+UseSerialGC -Djava.awt.headless=true'
        run: |
          echo "Starting backend JAR with H2 in-memory database for E2E testing..."
          echo "JVM Options: $JAVA_OPTS"
          
          # Find the JAR file
          JAR_FILE=$(ls target/guardianes-backend-*.jar | head -1)
          echo "Using JAR: $JAR_FILE"
          
          # Start backend JAR directly for much faster startup
          java $JAVA_OPTS -Dspring.profiles.active=e2e -jar "$JAR_FILE" &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          echo "Backend JAR started with PID: $BACKEND_PID at $(date)"
          echo "H2 Console will be available at: http://localhost:${{ env.BACKEND_PORT }}/h2-console"
          
          # Give it a moment to start
          sleep 5
          echo "Initial JAR startup phase completed"
      
      - name: ⏳ Wait for Backend Health
        id: health-check
        run: |
          echo "Waiting for H2 in-memory backend to be ready..."
          echo "Backend PID: $BACKEND_PID"
          
          # Reasonable timeout for JAR startup (18 attempts * 10s = 3 minutes max)
          for i in {1..18}; do
            # Check if backend process is still running
            if ! kill -0 $BACKEND_PID 2>/dev/null; then
              echo "❌ Backend process died unexpectedly"
              exit 1
            fi
            
            if curl -f -s http://localhost:${{ env.BACKEND_PORT }}/actuator/health; then
              echo "✅ Backend is ready after ${i} attempts!"
              echo "ready=true" >> $GITHUB_OUTPUT
              
              # Display H2 database info
              echo "📊 H2 Database Status:"
              curl -s http://localhost:${{ env.BACKEND_PORT }}/actuator/health | jq '.' || echo "Health endpoint responded successfully"
              
              exit 0
            fi
            echo "⏳ Attempt $i/18: Backend not ready yet, waiting 10 seconds..."
            sleep 10
          done
          echo "❌ Backend JAR failed to start within 3-minute timeout"
          echo "ready=false" >> $GITHUB_OUTPUT
          exit 1
      
      - name: 📊 Backend Status Check
        if: always()
        run: |
          echo "## 🚀 Backend Service Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: ${{ steps.health-check.outputs.ready == 'true' && '✅ Ready' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: H2 In-Memory (MySQL Mode)" >> $GITHUB_STEP_SUMMARY
          echo "- **Port**: ${{ env.BACKEND_PORT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile**: e2e" >> $GITHUB_STEP_SUMMARY
          echo "- **H2 Console**: http://localhost:${{ env.BACKEND_PORT }}/h2-console" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # E2E Test Execution
  # ============================================
  e2e-tests:
    name: 🧪 E2E Tests (${{ matrix.test-file }})
    runs-on: ubuntu-latest
    needs: [backend-setup]
    if: needs.backend-setup.outputs.backend-ready == 'true'
    permissions:
      contents: read
    
    strategy:
      matrix:
        test-file:
          - functional-api-test.js
          - user-journey-test.js
          - simple-journey-test.js
          - visual-journey-test.js
      fail-fast: false
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: |
          npm install
          # Install additional dependencies if needed
          npm list puppeteer || npm install puppeteer
      
      - name: 🚀 Verify Backend Readiness
        run: |
          # Verify backend is still running and ready for E2E tests
          echo "Verifying H2 in-memory backend is ready for E2E tests..."
          
          # Quick health check
          if curl -f -s http://localhost:${{ env.BACKEND_PORT }}/actuator/health; then
            echo "✅ Backend is ready for testing!"
          else
            echo "❌ Backend is not responding, E2E tests may fail"
            exit 1
          fi
      
      - name: 🧪 Run E2E Test - ${{ matrix.test-file }}
        id: test-execution
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
          CI: 'true'
          BACKEND_URL: 'http://localhost:${{ env.BACKEND_PORT }}'
          SCREENSHOTS_ENABLED: 'true'
          LOG_LEVEL: 'info'
        run: |
          echo "Running E2E test: ${{ matrix.test-file }}"
          
          # Create required directories
          npm run pretest
          
          # Extract test name for targeted execution
          TEST_NAME=$(echo "${{ matrix.test-file }}" | sed 's/-test\.js$//' | sed 's/\.js$//')
          
          # Run the specific test using the test runner
          timeout ${{ env.TEST_TIMEOUT }} npm run test:$TEST_NAME || {
            echo "Test failed or timed out"
            exit 1
          }
        continue-on-error: false
      
      - name: 📸 Upload Screenshots & Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.test-file }}-${{ github.run_id }}
          path: |
            screenshots/
            e2e-test-results.json
            *.png
            logs/
          retention-days: 7
      
      - name: 📋 Collect Logs
        if: failure()
        run: |
          echo "Collecting logs for debugging..."
          mkdir -p logs
          
          # Backend logs and metrics
          curl -s http://localhost:${{ env.BACKEND_PORT }}/actuator/loggers > logs/backend-loggers.json || echo "Could not get backend loggers"
          curl -s http://localhost:${{ env.BACKEND_PORT }}/actuator/metrics > logs/backend-metrics.json || echo "Could not get backend metrics"
          curl -s http://localhost:${{ env.BACKEND_PORT }}/actuator/health > logs/backend-health.json || echo "Could not get backend health"
          
          # H2 database info (if accessible)
          echo "H2 Database URL: jdbc:h2:mem:e2e_testdb;MODE=MySQL" > logs/h2-info.txt
          echo "H2 Console: http://localhost:${{ env.BACKEND_PORT }}/h2-console" >> logs/h2-info.txt
          
          # Process information
          ps aux | grep java > logs/java-processes.txt || echo "Could not get java processes"
      
      - name: 📤 Upload Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs-${{ matrix.test-file }}-${{ github.run_id }}
          path: logs/
          retention-days: 3
      
      - name: 🛑 Cleanup
        if: always()
        run: |
          # Stop any running Spring Boot processes
          pkill -f "spring-boot:run" || echo "No Spring Boot processes to kill"
          
          # Clean up any remaining Java processes related to our tests
          pkill -f "guardianes-backend" || echo "No guardian backend processes to kill"
          
          echo "✅ Cleanup completed - H2 in-memory database automatically disposed"

  # ============================================
  # E2E Test Summary
  # ============================================
  e2e-summary:
    name: 📋 E2E Test Summary
    runs-on: ubuntu-latest
    needs: [backend-setup, e2e-tests]
    if: always()
    permissions:
      contents: read
    
    steps:
      - name: 📊 Generate E2E Test Summary
        run: |
          echo "## 🌐 End-to-End Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🗄️ Database Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: H2 In-Memory (MySQL Compatibility Mode)" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile**: e2e" >> $GITHUB_STEP_SUMMARY
          echo "- **External Services**: None (fully self-contained)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Test Execution Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Setup**: ${{ needs.backend-setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-setup.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ **All E2E tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The complete user journey validation has been verified using H2 in-memory database." >> $GITHUB_STEP_SUMMARY
            echo "- Fast execution with zero external dependencies" >> $GITHUB_STEP_SUMMARY
            echo "- MySQL compatibility mode ensures production-like behavior" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some E2E tests failed.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the test logs and screenshots for debugging." >> $GITHUB_STEP_SUMMARY
            echo "H2 Console was available at: http://localhost:8080/h2-console" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📸 Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
          echo "- Screenshots from all test runs" >> $GITHUB_STEP_SUMMARY
          echo "- Debug logs and H2 database information" >> $GITHUB_STEP_SUMMARY
          echo "- Backend health checks and metrics" >> $GITHUB_STEP_SUMMARY
      
      - name: 📊 E2E Pipeline Status
        if: always()
        run: |
          echo "E2E test pipeline completed. Results:"
          echo "- Backend Setup: ${{ needs.backend-setup.result }}"
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Check GitHub Actions for detailed test reports and screenshots."