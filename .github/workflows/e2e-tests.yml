name: 🌐 End-to-End API Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '*.js'
      - 'package.json'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '*.js'
      - 'package.json'
      - '.github/workflows/e2e-tests.yml'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'E2E Test Suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - functional-api
          - user-journey
          - simple-journey
          - visual-journey

env:
  NODE_VERSION: '18'
  BACKEND_PORT: 8080
  TEST_TIMEOUT: 300000  # 5 minutes

jobs:
  # ============================================
  # Consolidated E2E Test Execution with Backend Setup
  # ============================================
  e2e-tests:
    name: 🧪 E2E Tests (${{ matrix.test-file }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    
    strategy:
      matrix:
        test-file:
          - functional-api-test.js
          - user-journey-test.js
          - simple-journey-test.js
          - visual-journey-test.js
      fail-fast: false
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🐳 Pull Pre-built Backend Image
        run: |
          echo "🚀 Using optimized pre-built Docker image for ultra-fast startup..."
          # Pull the latest pre-built backend image from GHCR
          docker pull ghcr.io/${{ github.repository_owner }}/guardianes-backend:main
          docker images | grep guardianes-backend
          echo "✅ Pre-built backend image ready for instant deployment"
      
      - name: 🚀 Start Backend Container (Ultra-Fast)
        env:
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          echo "🐳 Starting optimized backend container with instant H2 database..."
          
          # Use docker-compose.ci.yml for optimized container deployment
          docker compose -f docker-compose.ci.yml up -d backend-test
          
          # Get container ID for monitoring
          CONTAINER_ID=$(docker compose -f docker-compose.ci.yml ps -q backend-test)
          echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV
          echo "✅ Backend container started: $CONTAINER_ID"
          echo "🏥 H2 Console available at: http://localhost:${{ env.BACKEND_PORT }}/h2-console"
          
          # Show container status
          docker compose -f docker-compose.ci.yml ps
          echo "🚀 Container startup initiated at $(date)"
      
      - name: ⏳ Wait for Container Health (Docker Native)
        id: health-check
        run: |
          echo "🏥 Waiting for Docker container healthcheck to pass..."
          echo "Container ID: $CONTAINER_ID"
          
          # Use Docker's native healthcheck with optimized timing (12 attempts * 5s = 1 minute max)
          for i in {1..12}; do
            # Check container status and health
            CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' $CONTAINER_ID)
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_ID 2>/dev/null || echo "none")
            
            echo "🔍 Container Status: $CONTAINER_STATUS, Health: $HEALTH_STATUS"
            
            if [ "$CONTAINER_STATUS" != "running" ]; then
              echo "❌ Container stopped unexpectedly"
              docker compose -f docker-compose.ci.yml logs backend-test
              exit 1
            fi
            
            if [ "$HEALTH_STATUS" = "healthy" ] || curl -f -s http://localhost:${{ env.BACKEND_PORT }}/actuator/health; then
              echo "✅ Backend container is healthy after ${i} attempts!"
              echo "ready=true" >> $GITHUB_OUTPUT
              
              # Display container and H2 database info
              echo "📊 Container Health Status:"
              docker inspect --format='{{.State.Health}}' $CONTAINER_ID
              echo "📊 H2 Database Status:"
              curl -s http://localhost:${{ env.BACKEND_PORT }}/actuator/health | jq '.' || echo "Health endpoint responded successfully"
              
              # Load test data now that backend is ready
              echo "🔄 Loading E2E test data..."
              curl -f -u ci:ci_test -X POST http://localhost:${{ env.BACKEND_PORT }}/api/test/load-data || echo "⚠️ Test data loading failed but continuing..."
              echo "✅ E2E test data loaded"
              
              exit 0
            fi
            echo "⏳ Attempt $i/12: Container not healthy yet, waiting 5 seconds..."
            sleep 5
          done
          
          echo "❌ Backend container failed to become healthy within 1-minute timeout"
          docker compose -f docker-compose.ci.yml logs backend-test
          exit 1
      
      - name: 📦 Install Node Dependencies (Robust)
        run: |
          echo "🔧 Installing Node.js dependencies with clean install..."
          
          # Clear npm cache to avoid corruption issues
          npm cache clean --force
          
          # Use npm ci for deterministic, reliable, faster installs for CI environments
          npm ci
          
          # Verify critical dependencies are properly installed
          echo "🔍 Verifying dependency installation..."
          npm list puppeteer || (echo "❌ Puppeteer not found, installing..." && npm install puppeteer)
          
          # Specifically verify lines-and-columns module is properly installed
          if [ ! -f "node_modules/lines-and-columns/build/index.js" ]; then
            echo "❌ lines-and-columns module incomplete, reinstalling..."
            npm uninstall lines-and-columns
            npm install lines-and-columns
          fi
          
          # Final verification of all dependencies
          echo "✅ Node.js dependencies installed and verified successfully"
          npm list --depth=0
          
          # Debug dependency paths (for troubleshooting)
          echo "🔍 Debug: Node.js module resolution paths:"
          node -e "console.log(require.resolve.paths('puppeteer'))"
          echo "🔍 Debug: lines-and-columns module path:"
          node -e "console.log(require.resolve('lines-and-columns'))" || echo "⚠️ lines-and-columns not found in require.resolve"
      
      - name: 🧪 Run E2E Test - ${{ matrix.test-file }}
        id: test-execution
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
          CI: 'true'
          BACKEND_URL: 'http://localhost:${{ env.BACKEND_PORT }}'
          SCREENSHOTS_ENABLED: 'true'
          LOG_LEVEL: 'info'
        run: |
          echo "Running E2E test: ${{ matrix.test-file }}"
          
          # Create required directories
          npm run pretest
          
          # Extract test name for targeted execution
          TEST_NAME=$(echo "${{ matrix.test-file }}" | sed 's/-test\.js$//' | sed 's/\.js$//')
          
          # Map test names to correct npm script names
          case "$TEST_NAME" in
            "functional-api")
              SCRIPT_NAME="functional"
              ;;
            "user-journey")
              SCRIPT_NAME="user-journey"
              ;;
            "simple-journey")
              SCRIPT_NAME="simple"
              ;;
            "visual-journey")
              SCRIPT_NAME="visual"
              ;;
            *)
              SCRIPT_NAME="$TEST_NAME"
              ;;
          esac
          
          echo "Running test script: npm run test:$SCRIPT_NAME"
          
          # Run the specific test using the test runner
          timeout ${{ env.TEST_TIMEOUT }} npm run test:$SCRIPT_NAME || {
            echo "Test failed or timed out"
            exit 1
          }
        continue-on-error: false
      
      - name: 📸 Upload Screenshots & Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.test-file }}-${{ github.run_id }}
          path: |
            screenshots/
            e2e-test-results.json
            *.png
            logs/
          retention-days: 7
      
      - name: 📋 Collect Logs
        if: failure()
        run: |
          echo "Collecting logs for debugging..."
          mkdir -p logs
          
          # Backend logs and metrics
          curl -s -u admin:e2e_test_password http://localhost:${{ env.BACKEND_PORT }}/actuator/loggers > logs/backend-loggers.json || echo "Could not get backend loggers"
          curl -s -u admin:e2e_test_password http://localhost:${{ env.BACKEND_PORT }}/actuator/metrics > logs/backend-metrics.json || echo "Could not get backend metrics"
          curl -s -u admin:e2e_test_password http://localhost:${{ env.BACKEND_PORT }}/actuator/health > logs/backend-health.json || echo "Could not get backend health"
          
          # H2 database info (if accessible)
          echo "H2 Database URL: jdbc:h2:mem:e2e_testdb;MODE=MySQL" > logs/h2-info.txt
          echo "H2 Console: http://localhost:${{ env.BACKEND_PORT }}/h2-console" >> logs/h2-info.txt
          
          # Process information
          ps aux | grep java > logs/java-processes.txt || echo "Could not get java processes"
      
      - name: 📤 Upload Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs-${{ matrix.test-file }}-${{ github.run_id }}
          path: logs/
          retention-days: 3
      
      - name: 🛑 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up Docker containers and resources..."
          
          # Stop and remove Docker containers
          docker compose -f docker-compose.ci.yml down || echo "No containers to stop"
          
          # Remove any dangling containers
          docker container prune -f || echo "No containers to prune"
          
          # Show final Docker status
          docker ps -a | grep guardianes || echo "No guardianes containers remaining"
          
          echo "✅ Docker cleanup completed - H2 in-memory database automatically disposed"

  # ============================================
  # E2E Test Summary
  # ============================================
  e2e-summary:
    name: 📋 E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()
    permissions:
      contents: read
    
    steps:
      - name: 📊 Generate E2E Test Summary
        run: |
          echo "## 🌐 End-to-End Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🗄️ Database Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: H2 In-Memory (MySQL Compatibility Mode)" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile**: e2e" >> $GITHUB_STEP_SUMMARY
          echo "- **External Services**: None (fully self-contained)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Test Execution Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ **All E2E tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The complete user journey validation has been verified using H2 in-memory database." >> $GITHUB_STEP_SUMMARY
            echo "- Fast execution with zero external dependencies" >> $GITHUB_STEP_SUMMARY
            echo "- MySQL compatibility mode ensures production-like behavior" >> $GITHUB_STEP_SUMMARY
            echo "- Consolidated architecture with backend setup and tests in same runner" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some E2E tests failed.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the test logs and screenshots for debugging." >> $GITHUB_STEP_SUMMARY
            echo "H2 Console was available at: http://localhost:8080/h2-console" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📸 Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
          echo "- Screenshots from all test runs" >> $GITHUB_STEP_SUMMARY
          echo "- Debug logs and H2 database information" >> $GITHUB_STEP_SUMMARY
          echo "- Backend health checks and metrics" >> $GITHUB_STEP_SUMMARY
      
      - name: 📊 E2E Pipeline Status
        if: always()
        run: |
          echo "E2E test pipeline completed. Results:"
          echo "- E2E Tests (consolidated): ${{ needs.e2e-tests.result }}"
          echo "Check GitHub Actions for detailed test reports and screenshots."