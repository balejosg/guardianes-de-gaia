name: ‚öì Helm Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'helm/**'
      - '.github/workflows/helm-deploy.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'helm/**'
      - '.github/workflows/helm-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      helm_action:
        description: 'Helm action to perform'
        required: true
        default: 'upgrade'
        type: choice
        options:
          - upgrade
          - install
          - rollback
          - uninstall
      rollback_revision:
        description: 'Revision to rollback to (only for rollback action)'
        required: false
        type: string
      dry_run:
        description: 'Perform dry run only'
        required: false
        default: false
        type: boolean

env:
  HELM_VERSION: "3.13.0"
  KUBECTL_VERSION: "1.28.0"

jobs:
  # ============================================
  # Helm Chart Validation
  # ============================================
  helm-validation:
    name: üîç Helm Chart Validation
    runs-on: ubuntu-latest
    
    outputs:
      chart-version: ${{ steps.chart-info.outputs.version }}
      app-version: ${{ steps.chart-info.outputs.app-version }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: ‚öì Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      
      - name: üîç Lint Helm chart
        run: |
          echo "üîç Linting Helm chart..."
          helm lint helm/
      
      - name: üìã Extract chart information
        id: chart-info
        run: |
          VERSION=$(grep '^version:' helm/Chart.yaml | awk '{print $2}')
          APP_VERSION=$(grep '^appVersion:' helm/Chart.yaml | awk '{print $2}' | tr -d '"')
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "app-version=$APP_VERSION" >> $GITHUB_OUTPUT
          
          echo "## üìã Chart Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **App Version**: $APP_VERSION" >> $GITHUB_STEP_SUMMARY
      
      - name: üß™ Template generation test
        run: |
          echo "üß™ Testing template generation..."
          
          # Test with development values
          helm template guardianes-dev helm/ -f helm/values-development.yaml \
            --set backend.image.tag=test \
            --set mysql.auth.password=test \
            --set mysql.auth.rootPassword=test \
            --set redis.auth.password=test \
            --set rabbitmq.auth.password=test \
            --set rabbitmq.auth.erlangCookie=test \
            --output-dir ./generated-dev
          
          # Test with production values
          helm template guardianes-prod helm/ -f helm/values-production.yaml \
            --set backend.image.tag=test \
            --set mysql.auth.password=test \
            --set mysql.auth.rootPassword=test \
            --set redis.auth.password=test \
            --set rabbitmq.auth.password=test \
            --set rabbitmq.auth.erlangCookie=test \
            --output-dir ./generated-prod
          
          echo "‚úÖ Template generation successful"
      
      - name: üîê Security scan of generated manifests
        run: |
          echo "üîê Scanning generated manifests for security issues..."
          
          # Check for hardcoded secrets (exclude test values, secret references, and empty values)
          SUSPICIOUS_PASSWORDS=$(grep -r "password.*:" ./generated-dev/ ./generated-prod/ | grep -v -E "(passwordRef|secretKeyRef|dGVzdA==|password:\s*$|password:\s*\"\"\s*$)" | grep -v "ZGV2X2dyYWZhbmVfYWRtaW4=")
          if [ -n "$SUSPICIOUS_PASSWORDS" ]; then
            echo "‚ùå Found potential hardcoded passwords:"
            echo "$SUSPICIOUS_PASSWORDS"
            exit 1
          fi
          
          # Check for privileged containers
          if grep -r "privileged: true" ./generated-dev/ ./generated-prod/; then
            echo "‚ùå Found privileged containers"
            exit 1
          fi
          
          # Check for host network
          if grep -r "hostNetwork: true" ./generated-dev/ ./generated-prod/; then
            echo "‚ùå Found host network usage"
            exit 1
          fi
          
          echo "‚úÖ Security scan passed"
      
      - name: üì§ Upload generated manifests
        uses: actions/upload-artifact@v4
        with:
          name: helm-manifests
          path: |
            generated-dev/
            generated-prod/
          retention-days: 7

  # ============================================
  # Self-Contained Chart Validation
  # ============================================
  helm-self-contained-check:
    name: üì¶ Self-Contained Chart Check
    runs-on: ubuntu-latest
    needs: [helm-validation]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: ‚öì Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      
      - name: üì¶ Verify self-contained chart
        run: |
          echo "üì¶ Verifying self-contained chart structure..."
          
          # Check that no dependencies are defined
          if grep -q "^dependencies:" helm/Chart.yaml; then
            echo "‚ùå Chart should not have dependencies for production-grade deployment"
            exit 1
          fi
          
          # Check that external services are disabled
          EXTERNAL_SERVICES_DISABLED=true
          
          if ! grep -q "mysql:" helm/values.yaml | grep -A1 "enabled: false" > /dev/null 2>&1; then
            echo "‚ö†Ô∏è MySQL should be disabled in production chart"
          fi
          
          if ! grep -q "redis:" helm/values.yaml | grep -A1 "enabled: false" > /dev/null 2>&1; then
            echo "‚ö†Ô∏è Redis should be disabled in production chart"
          fi
          
          echo "‚úÖ Self-contained chart verification passed"
          
          echo "## üì¶ Self-Contained Chart Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies**: None (‚úÖ Production-grade)" >> $GITHUB_STEP_SUMMARY
          echo "- **External Services**: Disabled (‚úÖ Production-grade)" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Type**: Self-contained microservice" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Development Deployment
  # ============================================
  deploy-development:
    name: üîß Deploy to Development
    runs-on: ubuntu-latest
    needs: [helm-validation, helm-self-contained-check]
    if: |
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development') &&
      github.event_name != 'pull_request'
    environment: development
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: ‚öì Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      
      - name: üîß Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}
      
      
      - name: üîê Configure Kubernetes access
        run: |
          # Configure kubectl for development cluster
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > ~/.kube/config
          kubectl config use-context development
          
          # Verify connection
          kubectl get nodes
      
      - name: üöÄ Deploy to development
        env:
          ENVIRONMENT: development
          HELM_ACTION: ${{ github.event.inputs.helm_action || 'upgrade' }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          echo "üöÄ Deploying to development environment..."
          
          # Set common Helm options
          HELM_OPTS="--namespace guardianes-dev --create-namespace"
          
          if [ "$DRY_RUN" = "true" ]; then
            HELM_OPTS="$HELM_OPTS --dry-run"
          fi
          
          case "$HELM_ACTION" in
            "install")
              helm install guardianes-dev helm/ \
                -f helm/values-development.yaml \
                --set backend.image.tag=develop \
                --set mysql.auth.password="${{ secrets.DEV_MYSQL_PASSWORD }}" \
                --set mysql.auth.rootPassword="${{ secrets.DEV_MYSQL_ROOT_PASSWORD }}" \
                --set redis.auth.password="${{ secrets.DEV_REDIS_PASSWORD }}" \
                --set rabbitmq.auth.password="${{ secrets.DEV_RABBITMQ_PASSWORD }}" \
                --set rabbitmq.auth.erlangCookie="${{ secrets.DEV_RABBITMQ_COOKIE }}" \
                $HELM_OPTS
              ;;
            "upgrade")
              helm upgrade --install guardianes-dev helm/ \
                -f helm/values-development.yaml \
                --set backend.image.tag=develop \
                --set mysql.auth.password="${{ secrets.DEV_MYSQL_PASSWORD }}" \
                --set mysql.auth.rootPassword="${{ secrets.DEV_MYSQL_ROOT_PASSWORD }}" \
                --set redis.auth.password="${{ secrets.DEV_REDIS_PASSWORD }}" \
                --set rabbitmq.auth.password="${{ secrets.DEV_RABBITMQ_PASSWORD }}" \
                --set rabbitmq.auth.erlangCookie="${{ secrets.DEV_RABBITMQ_COOKIE }}" \
                $HELM_OPTS
              ;;
            "rollback")
              if [ -n "${{ github.event.inputs.rollback_revision }}" ]; then
                helm rollback guardianes-dev ${{ github.event.inputs.rollback_revision }} \
                  --namespace guardianes-dev
              else
                echo "‚ùå Rollback revision not specified"
                exit 1
              fi
              ;;
            "uninstall")
              helm uninstall guardianes-dev --namespace guardianes-dev
              ;;
          esac
          
          echo "‚úÖ Development deployment completed"
      
      - name: üîç Verify deployment
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "üîç Verifying deployment..."
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/guardianes-dev-backend \
            --namespace guardianes-dev \
            --timeout=600s
          
          # Check pod status
          kubectl get pods -n guardianes-dev -l app.kubernetes.io/component=backend
          
          # Check service
          kubectl get svc -n guardianes-dev
          
          echo "‚úÖ Development deployment verified"

  # ============================================
  # Production Deployment
  # ============================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [helm-validation, helm-self-contained-check]
    if: |
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production') &&
      github.event_name != 'pull_request'
    environment: production
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: ‚öì Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      
      - name: üîß Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}
      
      
      - name: üîê Configure Kubernetes access
        run: |
          # Configure kubectl for production cluster
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > ~/.kube/config
          kubectl config use-context production
          
          # Verify connection
          kubectl get nodes
      
      - name: üìä Pre-deployment checks
        run: |
          echo "üìä Running pre-deployment checks..."
          
          # Check cluster resources
          kubectl top nodes
          kubectl get pods -n guardianes-prod -l app.kubernetes.io/component=backend
          
          # Check current release
          helm list -n guardianes-prod
          
          echo "‚úÖ Pre-deployment checks passed"
      
      - name: üöÄ Deploy to production
        env:
          ENVIRONMENT: production
          HELM_ACTION: ${{ github.event.inputs.helm_action || 'upgrade' }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          echo "üöÄ Deploying to production environment..."
          
          # Set common Helm options
          HELM_OPTS="--namespace guardianes-prod --create-namespace --wait --timeout=600s"
          
          if [ "$DRY_RUN" = "true" ]; then
            HELM_OPTS="$HELM_OPTS --dry-run"
          fi
          
          case "$HELM_ACTION" in
            "install")
              helm install guardianes-prod helm/ \
                -f helm/values-production.yaml \
                --set backend.image.tag=stable \
                --set mysql.auth.password="${{ secrets.PROD_MYSQL_PASSWORD }}" \
                --set mysql.auth.rootPassword="${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}" \
                --set redis.auth.password="${{ secrets.PROD_REDIS_PASSWORD }}" \
                --set rabbitmq.auth.password="${{ secrets.PROD_RABBITMQ_PASSWORD }}" \
                --set rabbitmq.auth.erlangCookie="${{ secrets.PROD_RABBITMQ_COOKIE }}" \
                $HELM_OPTS
              ;;
            "upgrade")
              helm upgrade --install guardianes-prod helm/ \
                -f helm/values-production.yaml \
                --set backend.image.tag=stable \
                --set mysql.auth.password="${{ secrets.PROD_MYSQL_PASSWORD }}" \
                --set mysql.auth.rootPassword="${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}" \
                --set redis.auth.password="${{ secrets.PROD_REDIS_PASSWORD }}" \
                --set rabbitmq.auth.password="${{ secrets.PROD_RABBITMQ_PASSWORD }}" \
                --set rabbitmq.auth.erlangCookie="${{ secrets.PROD_RABBITMQ_COOKIE }}" \
                $HELM_OPTS
              ;;
            "rollback")
              if [ -n "${{ github.event.inputs.rollback_revision }}" ]; then
                helm rollback guardianes-prod ${{ github.event.inputs.rollback_revision }} \
                  --namespace guardianes-prod --wait
              else
                echo "‚ùå Rollback revision not specified"
                exit 1
              fi
              ;;
            "uninstall")
              helm uninstall guardianes-prod --namespace guardianes-prod
              ;;
          esac
          
          echo "‚úÖ Production deployment completed"
      
      - name: üîç Post-deployment verification
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "üîç Verifying production deployment..."
          
          # Wait for all deployments to be ready
          kubectl rollout status deployment/guardianes-prod-backend \
            --namespace guardianes-prod \
            --timeout=600s
          
          # Check all pods
          kubectl get pods -n guardianes-prod
          
          # Check services
          kubectl get svc -n guardianes-prod
          
          # Check ingress
          kubectl get ingress -n guardianes-prod
          
          # Health check
          timeout 300 bash -c '
            while ! kubectl get pods -n guardianes-prod -l app.kubernetes.io/component=backend -o jsonpath="{.items[0].status.phase}" | grep -q "Running"; do
              echo "Waiting for backend pod to be running..."
              sleep 10
            done
          '
          
          echo "‚úÖ Production deployment verified"

  # ============================================
  # Deployment Summary
  # ============================================
  deployment-summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [helm-validation, deploy-development, deploy-production]
    if: always()
    
    steps:
      - name: üìä Generate deployment summary
        run: |
          echo "## ‚öì Helm Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Chart Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Version**: ${{ needs.helm-validation.outputs.chart-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App Version**: ${{ needs.helm-validation.outputs.app-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üéØ Deployment Results:" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-development.result }}" = "success" ]; then
            echo "- ‚úÖ **Development**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-development.result }}" = "failure" ]; then
            echo "- ‚ùå **Development**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-development.result }}" = "skipped" ]; then
            echo "- ‚è≠Ô∏è **Development**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "- ‚úÖ **Production**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-production.result }}" = "failure" ]; then
            echo "- ‚ùå **Production**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-production.result }}" = "skipped" ]; then
            echo "- ‚è≠Ô∏è **Production**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Action Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.helm_action || 'upgrade' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ github.event.inputs.rollback_revision }}" ]; then
            echo "- **Rollback Revision**: ${{ github.event.inputs.rollback_revision }}" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: üìù Production-grade deployment summary
        if: always()
        run: |
          echo "## üè≠ Production-Grade Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Self-contained chart deployment completed**" >> $GITHUB_STEP_SUMMARY
          echo "- No external dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Production-ready infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "- Docker-based microservice architecture" >> $GITHUB_STEP_SUMMARY