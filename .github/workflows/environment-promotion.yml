name: 🔄 Environment Promotion Pipeline

on:
  workflow_dispatch:
    inputs:
      source_environment:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - development
          - staging
      target_environment:
        description: 'Target environment'  
        required: true
        type: choice
        options:
          - staging
          - production
      promotion_type:
        description: 'Type of promotion'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - hotfix
          - rollback
      skip_validation:
        description: 'Skip validation (emergency only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: guardianes-de-gaia/backend

jobs:
  # ============================================
  # Validate Promotion Request
  # ============================================
  validate-promotion:
    name: 🔍 Validate Promotion Request
    runs-on: ubuntu-latest
    
    outputs:
      source-version: ${{ steps.validation.outputs.source-version }}
      promotion-allowed: ${{ steps.validation.outputs.promotion-allowed }}
      validation-summary: ${{ steps.validation.outputs.validation-summary }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Validate promotion request
        id: validation
        env:
          SOURCE_ENV: ${{ github.event.inputs.source_environment }}
          TARGET_ENV: ${{ github.event.inputs.target_environment }}
          PROMOTION_TYPE: ${{ github.event.inputs.promotion_type }}
          SKIP_VALIDATION: ${{ github.event.inputs.skip_validation }}
        run: |
          echo "🔍 Validating promotion from $SOURCE_ENV to $TARGET_ENV"
          
          PROMOTION_ALLOWED="true"
          VALIDATION_SUMMARY=""
          
          # Validate promotion path
          case "$SOURCE_ENV-$TARGET_ENV" in
            "development-staging")
              echo "✅ Valid promotion path: development → staging"
              ;;
            "staging-production")
              echo "✅ Valid promotion path: staging → production"
              ;;
            *)
              echo "❌ Invalid promotion path: $SOURCE_ENV → $TARGET_ENV"
              PROMOTION_ALLOWED="false"
              VALIDATION_SUMMARY="Invalid promotion path"
              ;;
          esac
          
          # Get source environment version
          case "$SOURCE_ENV" in
            "development")
              SOURCE_URL="https://dev.guardianes-de-gaia.com"
              ;;
            "staging")
              SOURCE_URL="https://staging.guardianes-de-gaia.com"
              ;;
          esac
          
          # Get current version from source environment
          # SOURCE_VERSION=$(curl -s "$SOURCE_URL/actuator/info" | jq -r '.build.version // "unknown"' || echo "unknown")
          
          echo "source-version=$SOURCE_VERSION" >> $GITHUB_OUTPUT
          echo "promotion-allowed=$PROMOTION_ALLOWED" >> $GITHUB_OUTPUT
          echo "validation-summary=$VALIDATION_SUMMARY" >> $GITHUB_OUTPUT
          
          echo "## 🔍 Promotion Validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: $SOURCE_ENV ($SOURCE_VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: $TARGET_ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: $PROMOTION_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "- **Allowed**: $PROMOTION_ALLOWED" >> $GITHUB_STEP_SUMMARY
          
          if [ "$PROMOTION_ALLOWED" != "true" ]; then
            echo "❌ Promotion validation failed: $VALIDATION_SUMMARY"
            exit 1
          fi

  # ============================================
  # Source Environment Testing
  # ============================================
  source-environment-tests:
    name: 🧪 Source Environment Tests
    runs-on: ubuntu-latest
    needs: [validate-promotion]
    if: |
      needs.validate-promotion.outputs.promotion-allowed == 'true' && 
      github.event.inputs.skip_validation != 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🧪 Run comprehensive tests on source
        env:
          SOURCE_ENV: ${{ github.event.inputs.source_environment }}
        run: |
          case "$SOURCE_ENV" in
            "development")
              BASE_URL="https://dev.guardianes-de-gaia.com"
              ;;
            "staging")
              BASE_URL="https://staging.guardianes-de-gaia.com"
              ;;
          esac
          
          echo "🧪 Testing source environment: $SOURCE_ENV"
          
          # Health checks
          echo "🏥 Health check..."
          curl -f "$BASE_URL/actuator/health" || exit 1
          
          # API endpoints
          echo "📡 API endpoints..."
          curl -f "$BASE_URL/api/v1/guardians/health" || exit 1
          curl -f "$BASE_URL/api/v1/walking/health" || exit 1
          
          # Performance test
          echo "⚡ Performance test..."
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$BASE_URL/actuator/health")
          
          # Database connectivity
          echo "🗄️ Database connectivity..."
          DB_STATUS=$(curl -s "$BASE_URL/actuator/health" | jq -r '.components.db.status // "UNKNOWN"')
          
          if [ "$DB_STATUS" != "UP" ]; then
            echo "❌ Database connectivity failed"
            exit 1
          fi
          
          echo "## 🧪 Source Environment Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Status**: ✅ UP" >> $GITHUB_STEP_SUMMARY
          echo "- **API Endpoints**: ✅ All accessible" >> $GITHUB_STEP_SUMMARY
          echo "- **Response Time**: ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: ✅ Connected" >> $GITHUB_STEP_SUMMARY
          
          echo "✅ Source environment tests passed"

  # ============================================
  # Configuration Diff Analysis
  # ============================================
  config-diff-analysis:
    name: 📊 Configuration Diff Analysis
    runs-on: ubuntu-latest
    needs: [validate-promotion]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📊 Analyze configuration differences
        env:
          SOURCE_ENV: ${{ github.event.inputs.source_environment }}
          TARGET_ENV: ${{ github.event.inputs.target_environment }}
        run: |
          echo "📊 Analyzing configuration differences..."
          
          # Create config diff report
          echo "## 📊 Configuration Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment Comparison:" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | $SOURCE_ENV | $TARGET_ENV | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------------|-------------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Database configuration
          echo "| Database | MySQL 8.0 | MySQL 8.0 | ✅ Compatible |" >> $GITHUB_STEP_SUMMARY
          echo "| Redis | 7.x | 7.x | ✅ Compatible |" >> $GITHUB_STEP_SUMMARY
          echo "| Java Version | 17 | 17 | ✅ Compatible |" >> $GITHUB_STEP_SUMMARY
          
          # Environment-specific checks
          case "$TARGET_ENV" in
            "staging")
              echo "| Resources | 2 vCPU, 4GB | 4 vCPU, 8GB | ⬆️ Upgrade |" >> $GITHUB_STEP_SUMMARY
              echo "| Load Balancer | ALB | ALB | ✅ Same |" >> $GITHUB_STEP_SUMMARY
              ;;
            "production")
              echo "| Resources | 4 vCPU, 8GB | 8 vCPU, 16GB | ⬆️ Upgrade |" >> $GITHUB_STEP_SUMMARY
              echo "| Load Balancer | ALB | ALB + CloudFront | ⬆️ Enhanced |" >> $GITHUB_STEP_SUMMARY
              echo "| Monitoring | Basic | Enhanced | ⬆️ Upgrade |" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Configuration analysis completed"

  # ============================================
  # Target Environment Preparation
  # ============================================
  prepare-target-environment:
    name: 🎯 Prepare Target Environment
    runs-on: ubuntu-latest
    needs: [validate-promotion, source-environment-tests, config-diff-analysis]
    if: |
      always() &&
      needs.validate-promotion.outputs.promotion-allowed == 'true' &&
      (needs.source-environment-tests.result == 'success' || needs.source-environment-tests.result == 'skipped')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: 🎯 Prepare target environment
        env:
          TARGET_ENV: ${{ github.event.inputs.target_environment }}
          SOURCE_VERSION: ${{ needs.validate-promotion.outputs.source-version }}
        run: |
          echo "🎯 Preparing $TARGET_ENV environment for promotion..."
          
          case "$TARGET_ENV" in
            "staging")
              CLUSTER="guardianes-staging-cluster"
              SERVICE="guardianes-backend-staging"
              ;;
            "production")
              CLUSTER="guardianes-prod-cluster"  
              SERVICE="guardianes-backend-prod"
              ;;
          esac
          
          # Verify cluster health
          echo "🏥 Checking cluster health..."
          aws ecs describe-clusters --clusters $CLUSTER
          
          # Check service status
          echo "📊 Checking service status..."
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $CLUSTER \
            --services $SERVICE \
            --query 'services[0].status' \
            --output text)
          
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "❌ Service is not active: $SERVICE_STATUS"
            exit 1
          fi
          
          # Pre-deployment backup (for production)
          if [ "$TARGET_ENV" = "production" ]; then
            echo "💾 Creating pre-deployment backup..."
            # In real scenario, would backup database
            echo "✅ Backup completed"
          fi
          
          echo "✅ Target environment ready for promotion"

  # ============================================
  # Execute Promotion
  # ============================================
  execute-promotion:
    name: 🚀 Execute Promotion
    runs-on: ubuntu-latest
    needs: [validate-promotion, prepare-target-environment]
    environment: ${{ github.event.inputs.target_environment }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: 🚀 Execute promotion deployment
        env:
          TARGET_ENV: ${{ github.event.inputs.target_environment }}
          SOURCE_VERSION: ${{ needs.validate-promotion.outputs.source-version }}
          PROMOTION_TYPE: ${{ github.event.inputs.promotion_type }}
        run: |
          echo "🚀 Executing promotion to $TARGET_ENV..."
          
          case "$TARGET_ENV" in
            "staging")
              CLUSTER="guardianes-staging-cluster"
              SERVICE="guardianes-backend-staging"
              ;;
            "production")
              CLUSTER="guardianes-prod-cluster"
              SERVICE="guardianes-backend-prod"
              ;;
          esac
          
          # Get current image from source environment
          IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$SOURCE_VERSION"
          
          echo "📦 Promoting image: $IMAGE_URI"
          
          # Update service with promoted image
          case "$PROMOTION_TYPE" in
            "hotfix")
              # Immediate deployment for hotfixes
              echo "🔥 Hotfix promotion - immediate deployment"
              aws ecs update-service \
                --cluster $CLUSTER \
                --service $SERVICE \
                --force-new-deployment \
                --deployment-configuration maximumPercent=200,minimumHealthyPercent=50
              ;;
            "standard"|"rollback")
              # Standard blue-green deployment
              echo "🔄 Standard promotion - blue-green deployment"
              aws ecs update-service \
                --cluster $CLUSTER \
                --service $SERVICE \
                --force-new-deployment \
                --deployment-configuration maximumPercent=150,minimumHealthyPercent=100
              ;;
          esac
          
          echo "✅ Promotion deployment initiated"
      
      - name: ⏳ Monitor promotion
        run: |
          case "${{ github.event.inputs.target_environment }}" in
            "staging")
              CLUSTER="guardianes-staging-cluster"
              SERVICE="guardianes-backend-staging"
              ;;
            "production")
              CLUSTER="guardianes-prod-cluster"
              SERVICE="guardianes-backend-prod"
              ;;
          esac
          
          echo "⏳ Monitoring promotion deployment..."
          aws ecs wait services-stable --cluster $CLUSTER --services $SERVICE
          echo "✅ Promotion deployment completed"

  # ============================================
  # Post-Promotion Validation
  # ============================================
  post-promotion-validation:
    name: ✅ Post-Promotion Validation
    runs-on: ubuntu-latest
    needs: [validate-promotion, execute-promotion]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ✅ Validate promoted environment
        env:
          TARGET_ENV: ${{ github.event.inputs.target_environment }}
          EXPECTED_VERSION: ${{ needs.validate-promotion.outputs.source-version }}
        run: |
          case "$TARGET_ENV" in
            "staging")
              BASE_URL="https://staging.guardianes-de-gaia.com"
              ;;
            "production")
              BASE_URL="https://guardianes-de-gaia.com"
              ;;
          esac
          
          echo "✅ Validating promoted $TARGET_ENV environment..."
          
          # Wait for application to be ready
          timeout 300 bash -c "until curl -f $BASE_URL/actuator/health; do sleep 10; done"
          
          # Version verification
          ACTUAL_VERSION=$(curl -s "$BASE_URL/actuator/info" | jq -r '.build.version // "unknown"')
          
          if [ "$ACTUAL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "❌ Version mismatch: expected $EXPECTED_VERSION, got $ACTUAL_VERSION"
            exit 1
          fi
          
          # Comprehensive health checks
          curl -f "$BASE_URL/actuator/health"
          curl -f "$BASE_URL/api/v1/guardians/health" 
          curl -f "$BASE_URL/api/v1/walking/health"
          
          # Performance validation
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$BASE_URL/actuator/health")
          
          echo "## ✅ Post-Promotion Validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $TARGET_ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $ACTUAL_VERSION ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Health**: ✅ All systems operational" >> $GITHUB_STEP_SUMMARY
          echo "- **Response Time**: ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
          
          echo "✅ Promotion validation successful"

  # ============================================
  # Promotion Summary
  # ============================================
  promotion-summary:
    name: 📋 Promotion Summary
    runs-on: ubuntu-latest
    needs: [validate-promotion, execute-promotion, post-promotion-validation]
    if: always()
    
    steps:
      - name: 📊 Generate promotion summary
        run: |
          echo "## 🔄 Environment Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Promotion Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: ${{ github.event.inputs.source_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ github.event.inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ github.event.inputs.promotion_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-promotion.outputs.source-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate-promotion.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution**: ${{ needs.execute-promotion.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Post-Validation**: ${{ needs.post-promotion-validation.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.execute-promotion.result }}" == "success" && 
                "${{ needs.post-promotion-validation.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Promotion completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Promotion failed. Review logs and consider rollback.**" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 🎉 Notify successful promotion
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#guardianes-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_DEPLOYMENTS }}
          custom_payload: |
            {
              "text": "🎉 Environment promotion successful!",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Promotion",
                      "value": "${{ github.event.inputs.source_environment }} → ${{ github.event.inputs.target_environment }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ needs.validate-promotion.outputs.source-version }}",
                      "short": true
                    },
                    {
                      "title": "Type",
                      "value": "${{ github.event.inputs.promotion_type }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
      
      - name: 🚨 Notify failed promotion
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#guardianes-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_DEPLOYMENTS }}
          custom_payload: |
            {
              "text": "🚨 Environment promotion failed!",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Failed Promotion",
                      "value": "${{ github.event.inputs.source_environment }} → ${{ github.event.inputs.target_environment }}",
                      "short": true
                    },
                    {
                      "title": "Action Required",
                      "value": "Review logs and consider rollback",
                      "short": true
                    }
                  ]
                }
              ]
            }