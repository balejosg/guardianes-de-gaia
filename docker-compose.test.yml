version: '3.9'

services:
  # ============================================
  # Backend Service for Integration Testing
  # ============================================
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: guardianes-backend-test
    ports:
      - "8080:8080"    # API
      - "9090:9090"    # Metrics
    environment:
      - SPRING_PROFILES_ACTIVE=ci
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-test:3306/guardianes_test?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=guardianes_test
      - SPRING_DATASOURCE_PASSWORD=test_secret
      - SPRING_REDIS_HOST=redis-test
      - SPRING_REDIS_PORT=6379
      - SPRING_RABBITMQ_HOST=rabbitmq-test
      - SPRING_RABBITMQ_PORT=5672
      - TZ=Europe/Madrid
    volumes:
      - maven-cache:/root/.m2
    depends_on:
      mysql-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      rabbitmq-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-u", "ci:ci_test", "http://localhost:8080/actuator/health", "||", "exit", "1"]
      interval: 20s
      timeout: 15s
      retries: 20
      start_period: 120s

  # ============================================
  # Backend Test Runner (runs tests against backend-test)
  # ============================================
  test-runner:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: builder
    container_name: guardianes-test-runner
    environment:
      - SPRING_PROFILES_ACTIVE=ci
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-test:3306/guardianes_test?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=guardianes_test
      - SPRING_DATASOURCE_PASSWORD=test_secret
      - SPRING_REDIS_HOST=redis-test
      - SPRING_REDIS_PORT=6379
      - SPRING_RABBITMQ_HOST=rabbitmq-test
      - SPRING_RABBITMQ_PORT=5672
      - TZ=Europe/Madrid
    volumes:
      - ./backend:/app
      - maven-cache:/root/.m2
    depends_on:
      backend-test:
        condition: service_healthy
    networks:
      - test-network
    command: >
      bash -c "
        echo 'ðŸ”„ Waiting for backend to be ready...' &&
        sleep 10 &&
        echo 'ðŸ§ª Running tests against backend...' &&
        ./mvnw test -Dspring.profiles.active=test
      "

  # ============================================
  # MySQL Database for Testing
  # ============================================
  mysql-test:
    image: mysql:8.0
    container_name: guardianes-mysql-test
    environment:
      MYSQL_ROOT_PASSWORD: root_test_secret
      MYSQL_DATABASE: guardianes_test
      MYSQL_USER: guardianes_test
      MYSQL_PASSWORD: test_secret
      TZ: Europe/Madrid
    ports:
      - "3307:3306"
    volumes:
      - mysql-test-data:/var/lib/mysql
      # - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_test_secret"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ============================================
  # Redis Cache for Testing
  # ============================================
  redis-test:
    image: redis:7-alpine
    container_name: guardianes-redis-test
    ports:
      - "6380:6379"
    volumes:
      - redis-test-data:/data
      # - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ============================================
  # RabbitMQ Message Queue for Testing
  # ============================================
  rabbitmq-test:
    image: rabbitmq:3.12-management-alpine
    container_name: guardianes-rabbitmq-test
    environment:
      RABBITMQ_DEFAULT_USER: guardian_test
      RABBITMQ_DEFAULT_PASS: rabbit_test_secret
      RABBITMQ_DEFAULT_VHOST: /test
    ports:
      - "5673:5672"    # AMQP
      - "15673:15672"  # Management UI
    volumes:
      - rabbitmq-test-data:/var/lib/rabbitmq
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

# ============================================
# Networks
# ============================================
networks:
  test-network:
    driver: bridge

# ============================================
# Volumes
# ============================================
volumes:
  mysql-test-data:
    driver: local
  redis-test-data:
    driver: local
  rabbitmq-test-data:
    driver: local
  maven-cache:
    driver: local