// Mocks generated by Mockito 5.4.6 from annotations
// in guardianes_mobile/test/features/auth/presentation/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:guardianes_mobile/features/auth/domain/entities/auth_result.dart'
    as _i3;
import 'package:guardianes_mobile/features/auth/domain/entities/guardian.dart'
    as _i7;
import 'package:guardianes_mobile/features/auth/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:guardianes_mobile/features/auth/domain/usecases/login_guardian.dart'
    as _i4;
import 'package:guardianes_mobile/features/auth/domain/usecases/register_guardian.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResult_1 extends _i1.SmartFake implements _i3.AuthResult {
  _FakeAuthResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginGuardian].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginGuardian extends _i1.Mock implements _i4.LoginGuardian {
  MockLoginGuardian() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i5.Future<_i3.AuthResult> call({
    required String? usernameOrEmail,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #usernameOrEmail: usernameOrEmail,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.AuthResult>.value(_FakeAuthResult_1(
          this,
          Invocation.method(
            #call,
            [],
            {
              #usernameOrEmail: usernameOrEmail,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.AuthResult>);
}

/// A class which mocks [RegisterGuardian].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterGuardian extends _i1.Mock implements _i6.RegisterGuardian {
  MockRegisterGuardian() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i5.Future<_i3.AuthResult> call({
    required String? username,
    required String? email,
    required String? password,
    required String? name,
    required DateTime? birthDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #username: username,
            #email: email,
            #password: password,
            #name: name,
            #birthDate: birthDate,
          },
        ),
        returnValue: _i5.Future<_i3.AuthResult>.value(_FakeAuthResult_1(
          this,
          Invocation.method(
            #call,
            [],
            {
              #username: username,
              #email: email,
              #password: password,
              #name: name,
              #birthDate: birthDate,
            },
          ),
        )),
      ) as _i5.Future<_i3.AuthResult>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.AuthResult> register({
    required String? username,
    required String? email,
    required String? password,
    required String? name,
    required DateTime? birthDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #username: username,
            #email: email,
            #password: password,
            #name: name,
            #birthDate: birthDate,
          },
        ),
        returnValue: _i5.Future<_i3.AuthResult>.value(_FakeAuthResult_1(
          this,
          Invocation.method(
            #register,
            [],
            {
              #username: username,
              #email: email,
              #password: password,
              #name: name,
              #birthDate: birthDate,
            },
          ),
        )),
      ) as _i5.Future<_i3.AuthResult>);

  @override
  _i5.Future<_i3.AuthResult> login({
    required String? usernameOrEmail,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #usernameOrEmail: usernameOrEmail,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.AuthResult>.value(_FakeAuthResult_1(
          this,
          Invocation.method(
            #login,
            [],
            {
              #usernameOrEmail: usernameOrEmail,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.AuthResult>);

  @override
  _i5.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i7.Guardian?> getCurrentGuardian() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentGuardian,
          [],
        ),
        returnValue: _i5.Future<_i7.Guardian?>.value(),
      ) as _i5.Future<_i7.Guardian?>);

  @override
  _i5.Future<bool> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
