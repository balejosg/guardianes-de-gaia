# Development Configuration for Docker Environment
spring.application.name=guardianes-backend

# Database Configuration - Enabled for Guardian domain
# Exclude only problematic metrics auto-configurations to fix Docker cgroup and web metrics issues
spring.autoconfigure.exclude=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration,org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration

# Database Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true

# Flyway Configuration - Disabled for testing to use JPA auto-create
spring.flyway.enabled=false

# Redis Configuration
spring.data.redis.host=${SPRING_REDIS_HOST}
spring.data.redis.port=${SPRING_REDIS_PORT}

# RabbitMQ Configuration
spring.rabbitmq.host=${SPRING_RABBITMQ_HOST}
spring.rabbitmq.port=${SPRING_RABBITMQ_PORT}

# Server configuration
server.port=8080

# Actuator endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true

# SystemMetricsAutoConfiguration excluded above to fix Docker cgroup issue

# Security - Disable for development (we'll implement proper auth later)
spring.security.user.name=admin
spring.security.user.password=dev123
spring.security.user.roles=ADMIN

# Logging
logging.level.com.guardianes=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=DEBUG