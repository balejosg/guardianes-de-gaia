package com.guardianes.walking.domain.model;

import com.guardianes.shared.domain.model.GuardianId;
import com.guardianes.shared.domain.model.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * Rich domain object representing a step record with business logic and validation. Encapsulates
 * the business rules for step tracking and energy generation.
 */
public class StepRecord {
    private final GuardianId guardianId;
    private final StepCount stepCount;
    private final Timestamp recordedAt;

    private StepRecord(GuardianId guardianId, StepCount stepCount, Timestamp recordedAt) {
        this.guardianId = guardianId;
        this.stepCount = stepCount;
        this.recordedAt = recordedAt;
    }

    /**
     * Creates a new step record with current timestamp. Validates business rules during creation.
     */
    public static StepRecord create(GuardianId guardianId, StepCount stepCount) {
        Objects.requireNonNull(guardianId, "Guardian ID cannot be null");
        Objects.requireNonNull(stepCount, "Step count cannot be null");

        return new StepRecord(guardianId, stepCount, Timestamp.now());
    }

    /** Creates a step record with specific timestamp (for testing or data migration). */
    public static StepRecord createWithTimestamp(
            GuardianId guardianId, StepCount stepCount, Timestamp timestamp) {
        Objects.requireNonNull(guardianId, "Guardian ID cannot be null");
        Objects.requireNonNull(stepCount, "Step count cannot be null");
        Objects.requireNonNull(timestamp, "Timestamp cannot be null");

        return new StepRecord(guardianId, stepCount, timestamp);
    }

    /**
     * Calculates the energy generated by this step record. Business rule: 1 energy per 10 steps.
     */
    public Energy calculateEnergyGenerated() {
        return Energy.fromSteps(this.stepCount);
    }

    /** Validates if this step record would cause a daily total to exceed the maximum. */
    public boolean wouldExceedDailyMaximum(StepCount currentDailyTotal) {
        return this.stepCount.wouldExceedDailyMaximum(currentDailyTotal);
    }

    /**
     * Checks if this step record represents a reasonable increment from a previous record. Business
     * rule: Maximum 200 steps per minute is considered reasonable.
     */
    public boolean isReasonableIncrementFrom(StepRecord previousRecord) {
        if (previousRecord == null) {
            return true; // First record is always reasonable
        }

        if (!this.guardianId.equals(previousRecord.guardianId)) {
            throw new IllegalArgumentException(
                    "Cannot compare step records from different guardians");
        }

        long minutesElapsed = this.recordedAt.minutesBetween(previousRecord.recordedAt);
        if (minutesElapsed <= 0) {
            return false; // No time elapsed or negative time
        }

        int stepIncrement = this.stepCount.value() - previousRecord.stepCount.value();
        int maxReasonableSteps = (int) (minutesElapsed * 200); // 200 steps per minute max

        return stepIncrement <= maxReasonableSteps;
    }

    // Getters
    public GuardianId getGuardianId() {
        return guardianId;
    }

    public StepCount getStepCount() {
        return stepCount;
    }

    public Timestamp getRecordedAt() {
        return recordedAt;
    }

    // Legacy getters for backward compatibility (to be removed after migration)
    @Deprecated
    public Long getGuardianIdValue() {
        return guardianId.value();
    }

    @Deprecated
    public int getStepCountValue() {
        return stepCount.value();
    }

    @Deprecated
    public LocalDateTime getTimestamp() {
        return recordedAt.value();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        StepRecord that = (StepRecord) o;
        return Objects.equals(guardianId, that.guardianId)
                && Objects.equals(stepCount, that.stepCount)
                && Objects.equals(recordedAt, that.recordedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(guardianId, stepCount, recordedAt);
    }

    @Override
    public String toString() {
        return "StepRecord{"
                + "guardianId="
                + guardianId
                + ", stepCount="
                + stepCount
                + ", recordedAt="
                + recordedAt
                + '}';
    }
}
