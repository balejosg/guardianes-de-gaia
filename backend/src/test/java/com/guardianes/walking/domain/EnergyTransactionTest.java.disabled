package com.guardianes.walking.domain;

import com.guardianes.shared.domain.model.GuardianId;
import com.guardianes.shared.domain.model.Timestamp;
import com.guardianes.walking.domain.model.Energy;
import com.guardianes.walking.domain.model.EnergySource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import java.time.LocalDateTime;
import static org.junit.jupiter.api.Assertions.*;

@DisplayName("EnergyTransaction Domain Object Tests")
class EnergyTransactionTest {

    @Test
    @DisplayName("Should create earned energy transaction")
    void shouldCreateEarnedEnergyTransaction() {
        // Given
        GuardianId guardianId = GuardianId.of(1L);
        Energy amount = Energy.of(50);
        EnergySource source = EnergySource.steps();
        
        // When
        EnergyTransaction transaction = EnergyTransaction.earned(guardianId, amount, source);
        
        // Then
        assertEquals(guardianId, transaction.getGuardianId());
        assertEquals(EnergyTransactionType.EARNED, transaction.getType());
        assertEquals(amount, transaction.getAmount());
        assertEquals(source, transaction.getSource());
        assertTrue(transaction.isEarning());
        assertFalse(transaction.isSpending());
    }

    @Test
    @DisplayName("Should create spent energy transaction")
    void shouldCreateSpentEnergyTransaction() {
        // Given
        GuardianId guardianId = GuardianId.of(1L);
        Energy amount = Energy.of(30);
        EnergySource source = EnergySource.battle();
        
        // When
        EnergyTransaction transaction = EnergyTransaction.spent(guardianId, amount, source);
        
        // Then
        assertEquals(guardianId, transaction.getGuardianId());
        assertEquals(EnergyTransactionType.SPENT, transaction.getType());
        assertEquals(amount, transaction.getAmount());
        assertEquals(source, transaction.getSource());
        assertFalse(transaction.isEarning());
        assertTrue(transaction.isSpending());
    }

    @Test
    @DisplayName("Should reject zero energy transaction")
    void shouldRejectZeroEnergyTransaction() {
        // Given
        GuardianId guardianId = GuardianId.of(1L);
        Energy zeroAmount = Energy.zero();
        EnergySource source = EnergySource.steps();
        
        // When & Then
        IllegalArgumentException exception = assertThrows(
            IllegalArgumentException.class,
            () -> EnergyTransaction.earned(guardianId, zeroAmount, source)
        );
        
        assertTrue(exception.getMessage().contains("zero energy"));
    }

    @Test
    @DisplayName("Should reject null parameters")
    void shouldRejectNullParameters() {
        // Given
        GuardianId guardianId = GuardianId.of(1L);
        Energy amount = Energy.of(50);
        EnergySource source = EnergySource.steps();
        
        // When & Then
        assertThrows(NullPointerException.class, 
            () -> EnergyTransaction.earned(null, amount, source));
        assertThrows(NullPointerException.class, 
            () -> EnergyTransaction.earned(guardianId, null, source));
        assertThrows(NullPointerException.class, 
            () -> EnergyTransaction.earned(guardianId, amount, null));
    }

    @Test
    @DisplayName("Should calculate signed amount correctly")
    void shouldCalculateSignedAmountCorrectly() {
        // Given
        GuardianId guardianId = GuardianId.of(1L);
        Energy amount = Energy.of(50);
        
        EnergyTransaction earnedTransaction = EnergyTransaction.earned(guardianId, amount, EnergySource.steps());
        EnergyTransaction spentTransaction = EnergyTransaction.spent(guardianId, amount, EnergySource.battle());
        
        // When
        Energy earnedSigned = earnedTransaction.getSignedAmount();
        Energy spentSigned = spentTransaction.getSignedAmount();
        
        // Then
        assertEquals(Energy.of(50), earnedSigned);
        assertEquals(Energy.of(-50), spentSigned);
    }

    @Test
    @DisplayName("Should detect step source correctly")
    void shouldDetectStepSourceCorrectly() {
        // Given
        GuardianId guardianId = GuardianId.of(1L);
        Energy amount = Energy.of(50);
        
        EnergyTransaction stepTransaction = EnergyTransaction.earned(guardianId, amount, EnergySource.steps());
        EnergyTransaction battleTransaction = EnergyTransaction.spent(guardianId, amount, EnergySource.battle());
        
        // When & Then
        assertTrue(stepTransaction.isFromSteps());
        assertFalse(battleTransaction.isFromSteps());
    }

    @Test
    @DisplayName("Should create transaction with specific timestamp")
    void shouldCreateTransactionWithSpecificTimestamp() {
        // Given
        GuardianId guardianId = GuardianId.of(1L);
        Energy amount = Energy.of(50);
        EnergySource source = EnergySource.steps();
        Timestamp timestamp = Timestamp.of(LocalDateTime.now().minusHours(1));
        
        // When
        EnergyTransaction transaction = EnergyTransaction.createWithTimestamp(
            guardianId, EnergyTransactionType.EARNED, amount, source, timestamp);
        
        // Then
        assertEquals(guardianId, transaction.getGuardianId());
        assertEquals(EnergyTransactionType.EARNED, transaction.getType());
        assertEquals(amount, transaction.getAmount());
        assertEquals(source, transaction.getSource());
        assertEquals(timestamp, transaction.getOccurredAt());
    }

    @Test
    @DisplayName("Should provide backward compatibility with legacy getters")
    void shouldProvideBackwardCompatibilityWithLegacyGetters() {
        // Given
        GuardianId guardianId = GuardianId.of(123L);
        Energy amount = Energy.of(50);
        EnergySource source = EnergySource.of("TEST_SOURCE");
        
        EnergyTransaction transaction = EnergyTransaction.earned(guardianId, amount, source);
        
        // When & Then
        assertEquals(123L, transaction.getGuardianIdValue());
        assertEquals(50, transaction.getAmountValue());
        assertEquals("TEST_SOURCE", transaction.getSourceName());
        assertNotNull(transaction.getTimestamp());
    }

    @Test
    @DisplayName("Should handle equality correctly")
    void shouldHandleEqualityCorrectly() {
        // Given
        GuardianId guardianId = GuardianId.of(1L);
        Energy amount = Energy.of(50);
        EnergySource source = EnergySource.steps();
        Timestamp timestamp = Timestamp.of(LocalDateTime.now().minusHours(1));
        
        EnergyTransaction first = EnergyTransaction.createWithTimestamp(
            guardianId, EnergyTransactionType.EARNED, amount, source, timestamp);
        EnergyTransaction second = EnergyTransaction.createWithTimestamp(
            guardianId, EnergyTransactionType.EARNED, amount, source, timestamp);
        EnergyTransaction different = EnergyTransaction.createWithTimestamp(
            guardianId, EnergyTransactionType.SPENT, amount, source, timestamp);
        
        // When & Then
        assertEquals(first, second);
        assertNotEquals(first, different);
        assertEquals(first.hashCode(), second.hashCode());
    }
}